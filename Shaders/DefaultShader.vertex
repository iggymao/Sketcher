//Vertex Shader
#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec4 color;
layout (location = 2) in vec2 texCoord;
layout (location = 3) in vec3 normal;

out vec3 FragPos;
out vec4 ourColor;
out vec2 TexCoord;
out vec3 Normal;

uniform mat4 transform;
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
//     gl_Position = view * vec4(position, 1.0f);
     gl_Position = projection * view * model * vec4(position, 1.0f);

     ourColor = color;
//     ourColor = vec4(position, 1.0f);
//     ourColor = vec4(texCoord, 1.0f, 1.0f);
//     ourColor = vec4(normal,1.0f);
//	ourColor = vec4(view[0][0],view[1][0],view[2][0],view[3][0]);
//	ourColor = vec4(view[0][1],view[1][1],view[2][1],view[3][1]);
//	ourColor = vec4(projection[0][0],projection[1][0],projection[2][0],projection[3][0]);
//	ourColor = vec4(projection[0][1],projection[1][1],projection[2][1],projection[3][1]);


   FragPos = vec3(model * vec4(position, 1.0f));
   Normal = mat3(transpose(inverse(model))) * normal; 
   TexCoord = vec2(texCoord.x, 1.0-texCoord.y);
}
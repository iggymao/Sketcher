//Fragment shader
#version 330 core
struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform vec3 viewPos;
uniform Material material;
uniform Light light;


in vec3 ourColor;
in vec2 TexCoord;
in vec3 Normal;
in vec3 FragPos;

//uniform vec4 ourColor; // set the variable in the OpenGL code in our program
uniform sampler2D ourTexture;
//uniform vec3 objectColor;
//uniform vec3 lightColor;
//uniform vec3 lightPos;
//uniform vec3 viewPos;

out vec4 color;

void main()
{
    // Ambient
    vec3 ambient = lightColor * material.ambient;
  	
    // Diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = lightColor * (diff * material.diffuse);
    
    // Specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = lightColor * (spec * material.specular);  
        
    vec3 result = ambient + diffuse + specular;
    color = vec4(result, 1.0f);

//////////////////////////////////////////////
//  Working Code before Material struct added
//////////////////////////////////////////////
 //   //Ambient Lighting
 //   float ambientStrength = 0.15f;
 //   vec3 ambient = ambientStrength * lightColor;

//    //Diffuse ligting
//    vec3 norm = normalize(Normal);
//    vec3 lightDir = normalize(lightPos - FragPos);
//    float diff = max(dot(norm, lightDir), 0.0);
//    vec3 diffuse = diff * lightColor;

//    // Specular lighting
//    float specularStrength = 0.75f;
//   vec3 viewDir = normalize(viewPos - FragPos);
//    vec3 reflectDir = reflect(-lightDir, norm);  
//    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 256);
//    vec3 specular = specularStrength * spec * lightColor;

//    vec3 result = (ambient + diffuse + specular) * objectColor;

//    // multiplies our loaded texture by the results of the ambient lighting
//    color = texture(ourTexture, TexCoord) * vec4(result, 1.0f);  
}